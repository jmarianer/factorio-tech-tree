from typing import Any, Union, overload, Literal

LUA_VERSION: tuple[int]


class _LuaTable:
    def keys(self) -> list[Union[str, int]]: ...
    def values(self) -> list[LuaObject]: ...
    def items(self) -> list[tuple[Union[str, int], LuaObject]]: ...

LuaObject = Union[_LuaTable, int, str, float, bool, None]

def lua_type(obj: LuaObject) -> str: ...


class LuaRuntime:
    def __init__(self, unpack_returned_tuples: bool) -> None: ...

    def eval(self, lua_code: str, *args: Any) -> Any: ...
    def execute(self, lua_code: str, *args: Any) -> Any: ...
    def globals(self) -> Any: ...
    def table(self, *items: Any, **kwargs: Any) -> _LuaTable: ...

    # I don't use these functions so not typing them.
    #def compile(self, lua_code) -> Any: ...
    #def require(self, module_name) -> Any: ...
    #def table_from(self, *args) -> Any: ...
    #def __reduce__(self) -> Any: ...
    #def __setstate__(self, state) -> Any: ...


class LuaError(Exception): ...
class LuaSyntaxError(LuaError): ...